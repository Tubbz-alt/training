'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18063
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
'
Namespace Authentication
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/Authentication/Service1")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SHA256OperationCompleted As System.Threading.SendOrPostCallback
        
        Private createPasswordStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fetchSBMSContentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://training.pnl.gov/services/authentication/authentication.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SHA256Completed As SHA256CompletedEventHandler
        
        '''<remarks/>
        Public Event createPasswordStringCompleted As createPasswordStringCompletedEventHandler
        
        '''<remarks/>
        Public Event fetchSBMSContentCompleted As fetchSBMSContentCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authentication/Service1/SHA256", RequestNamespace:="http://tempuri.org/Authentication/Service1", ResponseNamespace:="http://tempuri.org/Authentication/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SHA256(ByVal strTempPassword As String, ByVal strUserName As String) As String
            Dim results() As Object = Me.Invoke("SHA256", New Object() {strTempPassword, strUserName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSHA256(ByVal strTempPassword As String, ByVal strUserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SHA256", New Object() {strTempPassword, strUserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSHA256(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SHA256Async(ByVal strTempPassword As String, ByVal strUserName As String)
            Me.SHA256Async(strTempPassword, strUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SHA256Async(ByVal strTempPassword As String, ByVal strUserName As String, ByVal userState As Object)
            If (Me.SHA256OperationCompleted Is Nothing) Then
                Me.SHA256OperationCompleted = AddressOf Me.OnSHA256OperationCompleted
            End If
            Me.InvokeAsync("SHA256", New Object() {strTempPassword, strUserName}, Me.SHA256OperationCompleted, userState)
        End Sub
        
        Private Sub OnSHA256OperationCompleted(ByVal arg As Object)
            If (Not (Me.SHA256CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SHA256Completed(Me, New SHA256CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authentication/Service1/createPasswordString", RequestNamespace:="http://tempuri.org/Authentication/Service1", ResponseNamespace:="http://tempuri.org/Authentication/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function createPasswordString() As String
            Dim results() As Object = Me.Invoke("createPasswordString", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BegincreatePasswordString(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("createPasswordString", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcreatePasswordString(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub createPasswordStringAsync()
            Me.createPasswordStringAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub createPasswordStringAsync(ByVal userState As Object)
            If (Me.createPasswordStringOperationCompleted Is Nothing) Then
                Me.createPasswordStringOperationCompleted = AddressOf Me.OncreatePasswordStringOperationCompleted
            End If
            Me.InvokeAsync("createPasswordString", New Object(-1) {}, Me.createPasswordStringOperationCompleted, userState)
        End Sub
        
        Private Sub OncreatePasswordStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.createPasswordStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent createPasswordStringCompleted(Me, New createPasswordStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Authentication/Service1/fetchSBMSContent", RequestNamespace:="http://tempuri.org/Authentication/Service1", ResponseNamespace:="http://tempuri.org/Authentication/Service1", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function fetchSBMSContent(ByVal strURL As String) As String
            Dim results() As Object = Me.Invoke("fetchSBMSContent", New Object() {strURL})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginfetchSBMSContent(ByVal strURL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("fetchSBMSContent", New Object() {strURL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndfetchSBMSContent(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub fetchSBMSContentAsync(ByVal strURL As String)
            Me.fetchSBMSContentAsync(strURL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fetchSBMSContentAsync(ByVal strURL As String, ByVal userState As Object)
            If (Me.fetchSBMSContentOperationCompleted Is Nothing) Then
                Me.fetchSBMSContentOperationCompleted = AddressOf Me.OnfetchSBMSContentOperationCompleted
            End If
            Me.InvokeAsync("fetchSBMSContent", New Object() {strURL}, Me.fetchSBMSContentOperationCompleted, userState)
        End Sub
        
        Private Sub OnfetchSBMSContentOperationCompleted(ByVal arg As Object)
            If (Not (Me.fetchSBMSContentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fetchSBMSContentCompleted(Me, New fetchSBMSContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SHA256CompletedEventHandler(ByVal sender As Object, ByVal e As SHA256CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SHA256CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub createPasswordStringCompletedEventHandler(ByVal sender As Object, ByVal e As createPasswordStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class createPasswordStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub fetchSBMSContentCompletedEventHandler(ByVal sender As Object, ByVal e As fetchSBMSContentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fetchSBMSContentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
